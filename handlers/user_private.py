from aiogram import F, types, Router
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f
from aiogram.utils.formatting import (
    as_list,
    as_marked_section,
    Bold,
)  # Italic, as_numbered_list –∏ —Ç–¥


from filters.chat_types import ChatTypeFilter

from keyboards.reply import get_keyboard

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        reply_markup=get_keyboard(
            "–ú–µ–Ω—é",
            "–û –º–∞–≥–∞–∑–∏–Ω–µ",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(2, 2)
        ),
    )


# @user_private_router.message(F.text.lower() == "–º–µ–Ω—é")
@user_private_router.message(or_f(Command("menu"), (F.text.lower() == "–º–µ–Ω—é")))
async def menu_cmd(message: types.Message):
    await message.answer("–í–æ—Ç –º–µ–Ω—é:")


@user_private_router.message(F.text.lower() == "–æ –º–∞–≥–∞–∑–∏–Ω–µ")
@user_private_router.message(Command("about"))
async def about_cmd(message: types.Message):
    await message.answer("–û –Ω–∞—Å:")


@user_private_router.message(F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã")
@user_private_router.message(Command("payment"))
async def payment_cmd(message: types.Message):
    text = as_marked_section(
        Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:"),
        "–ö–∞—Ä—Ç–æ–π –≤ –±–æ—Ç–µ",
        "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∞/–∫–µ—à",
        "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
        marker="‚úÖ ",
    )
    await message.answer(text.as_html())


@user_private_router.message(
    (F.text.lower().contains("–¥–æ—Å—Ç–∞–≤–∫")) | (F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"))
@user_private_router.message(Command("shipping"))
async def menu_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏/–∑–∞–∫–∞–∑–∞:"),
            "–ö—É—Ä—å–µ—Ä",
            "–°–∞–º–æ–≤—ã–Ω–æ—Å (—Å–µ–π—á–∞—Å –ø—Ä–∏–±–µ–≥—É –∑–∞–±–µ—Ä—É)",
            "–ü–æ–∫—É—à–∞—é —É –í–∞—Å (—Å–µ–π—á–∞—Å –ø—Ä–∏–±–µ–≥—É)",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–ù–µ–ª—å–∑—è:"),
            "–ü–æ—á—Ç–∞",
            "–ì–æ–ª—É–±–∏",
            marker="‚ùå "
        ),
        sep="\n----------------------\n",
    )
    await message.answer(text.as_html())





# SCOPES = ['https://www.googleapis.com/auth/documents.readonly']
# DOCUMENT_ID = '10CRiHLDDoa8x6pQcktVKwHveOL8VdJPN6P_gHDfUdWo'
# SERVICE_ACCOUNT_FILE = '/Users/main/Downloads/gtp-course-fb0abae1add2.json'
#
# credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
# service = build('docs', 'v1', credentials=credentials)
#
# def get_document_text():
#     document = service.documents().get(documentId=DOCUMENT_ID).execute()
#     content = document.get('body').get('content')
#     text = ''
#     for element in content:
#         if 'paragraph' in element:
#             paragraph_elements = element.get('paragraph').get('elements')
#             for elem in paragraph_elements:
#                 if 'textRun' in elem:
#                     text += elem.get('textRun').get('content')
#     return text





# @user_private_router.message(CommandStart())
# async def start_cmd(message: types.Message):
#     await message.answer("üêç hello_new_user üêç", reply_markup=reply.start_kb)
#
#
# @user_private_router.message(Command("shh"))
# async def shh_cmd(message: types.Message):
#     # photo_path = "/Users/main/PycharmProjects/GTP/attachments/datatypes.png"
#     # await message.answer_photo(photo=FSInputFile(photo_path), )
#     await message.answer("üêç shhhh... üêç",
#                          reply_markup=reply.del_kb)
#
#
# @user_private_router.message(F.text.lower().contains('–º–µ–Ω—é'))
# @user_private_router.message(Command("menu"))
# async def menu_cmd(message: types.Message):
#     await message.answer("üêç menu here üêç", reply_markup=reply.del_kb)
#
#
# @user_private_router.message(Command("about"))
# async def about_cmd(message: types.Message):
#     await message.answer("üêç We are your new way üêç")
#
#
# @user_private_router.message(or_f(Command("payment"), F.text.lower().contains('–æ–ø–ª–∞—Ç–∞')))
# async def payment_cmd(message: types.Message):
#     await message.answer("üêç Give me your money üêç")
#
#
# @user_private_router.message(Command("shipping"))
# async def shipping_cmd(message: types.Message):
#     text = as_list(
#         as_marked_section(
#             Bold("–í–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–ø–ª–∞—Ç–∏\n"),
#             "–ù–∞ –∫–∞—Ä—Ç—É",
#             "–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂",
#             "–ü—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ",
#             marker="üü¢ "
#         ),
#         as_marked_section(
#             Bold("–í—ñ–¥—Å—É—Ç–Ω—è –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å\n"),
#             "–ì–æ–ª—É–±–æ–º",
#             "–°–æ–≤–æ—é",
#             "–ê–≤—ñ–∞—Ü—ñ—î—é",
#             marker="‚õîÔ∏è "
#         ),
#         sep="\n----------------------------\n"
#     )
#     await message.answer(text.as_html())
#
#
# @user_private_router.message((F.text.lower().contains('hi')) | (F.text.lower().contains('hello')))
# async def echo_cmd(message: types.Message):
#     # text = message.text.lower()
#     # if text in ["hello", "hi", "–ø—Ä–∏–≤–µ—Ç", "–∫—É"]:
#     #     await message.answer("Sshhh...Hello, my friend!!")
#     # elif text in ["bye", "goodbye", "–ø–æ–∫–∞"]:
#     #     await message.answer("Bye-bye! See you later")
#     # else:
#     #     await message.answer("I dont think I understand what you mean")
#
#     await message.answer("üí´ Magic ü™Ñ")
#
#
# @user_private_router.message(F.contact)
# async def get_contact(message: types.Message):
#     await message.answer(f"–∫–æ–Ω—Ç–∞–∫—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ")
#     await message.answer(str(message.contact))
#
# @user_private_router.message(F.location)
# async def get_location(message: types.Message):
#     await message.answer(f"–ª–æ–∫–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞")
#     await message.answer(str(message.location))
